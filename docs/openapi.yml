openapi: "3.0.1"
info:
  title: "Skynet API"
  description: "This is the skynet infrastructure api"
  contact:
    email: "contact@guillaume-etheve.fr"
  version: "0.1"
servers:
  - url: "http://localhost:8888"
    description: Local test server
paths:
  /status:
    get:
      tags: [ "Status" ]
      responses:
        200:
          description: "The server is up and running"
  /api/shutdown:
    post:
      security:
        - auth: [ "shutdown" ]
      tags: [ "Admin" ]
      responses:
        200:
          description: "The server is shutting-down"
  /api/leaderboards:
    post:
      security:
        - auth: [ "get-player" ]
      tags: [ "Stats" ]
      responses:
        200:
          description: "Leaderboards have been generated"
  /api/leaderboards/{name}:
    post:
      security:
        - auth: [ "get-player" ]
      tags: [ "Stats" ]
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Requested leaderboard"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Leaderboard"
        404:
          description: "Not found"
  /api/players:
    get:
      security:
        - auth: [ "get-online-players" ]
      tags: [ "Player" ]
      responses:
        200:
          description: "Online players"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OnlinePlayerInfo"
  /api/players/{player}:
    get:
      security:
        - auth: [ "get-player" ]
      tags: [ "Player" ]
      parameters:
        - name: player
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Players"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerInfo"
  /api/players/{uuid}/proxy/login:
    post:
      security:
        - auth: [ "proxy-login" ]
      tags: [ "Login" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              title: ProxyLoginRequest
              required: [ username, version, proxy, ip ]
              type: object
              properties:
                username:
                  type: string
                ip:
                  type: string
                  format: "ipv4"
                proxy:
                  type: string
                  format: uuid
                version:
                  type: string
                #                version:
                #                  title: MinecraftVersion
                #                  type: object
                #                  required: [ brand, version ]
                #                  properties:
                #                    brand:
                #                      type: string
                #                    version:
                #                      type: string
                #                    mods:
                #                      type: array
                #                      items:
                #                        title: ModInfo
                #                        required: [ id, version ]
                #                        type: object
                #                        properties:
                #                          id:
                #                            type: string
                #                          version:
                #                            type: string
                locale:
                  type: string
      responses:
        200:
          description: "Login is permitted"
          content:
            application/json:
              schema:
                type: object
                required: [ "result" ]
                title: ProxyLoginResponse
                properties:
                  result:
                    type: string
                    enum: [ "Allowed", "Denied" ]
                  message:
                    $ref: "#/components/schemas/Message" #If denied
                  player_info:
                    type: object
                    title: ProxyLoginPlayerInfo
                    required: [ power, permissions, locale, properties ]
                    properties:
                      power:
                        type: integer
                      permissions:
                        type: array
                        items:
                          type: string
                      locale:
                        type: string
                      properties:
                        type: object
                        additionalProperties:
                          type: string
                  session:
                    type: string
                    format: uuid
  /api/sessions/{session}/modsinfo:
    post:
      security:
        - auth: [ "proxy-login" ]
      tags: [ "Login", "Session" ]
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                title: ModInfo
                required: [ id, version ]
                properties:
                  id:
                    type: string
                  version:
                    type: string
      responses:
        200:
          description: "Ok"
        404:
          description: "The session was not found"
  /api/sessions/{session}/clientbrand:
    post:
      security:
        - auth: [ "proxy-login" ]
      tags: [ "Login", "Session" ]
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: "Ok"
        404:
          description: "The session was not found"
  /api/players/{ip}/proxy/prelogin:
    get:
      security:
        - auth: [ "proxy-prelogin" ]
      tags: [ "Login" ]
      parameters:
        - name: ip
          in: path
          required: true
          schema:
            type: string
            format: ipv4
      responses:
        200:
          description: "PreLogin is permitted"
          content:
            application/json:
              schema:
                type: object
                required: [ "result" ]
                title: ProxyPreLoginResponse
                properties:
                  result:
                    type: string
                    enum: [ "Allowed", "Denied" ]
                  message:
                    $ref: "#/components/schemas/Message"
  /api/players/{uuid}/session:
    delete:
      security:
        - auth: [ "proxy-close-session" ]
      tags: [ "Session" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: "Ok"
  /api/players/{uuid}/login:
    post:
      security:
        - auth: [ "server-login" ]
      tags: [ "Login" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              description: The server who is requesting the player
              type: string
              format: uuid
        required: true
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: object
                title: ServerLoginPlayerInfo
                required: [ session, properties, locale, permissions, power, currency, properties, blocked, inventory, properties ]
                properties:
                  session:
                    type: string
                    format: uuid
                  proxy:
                    type: string
                    format: uuid
                  prefix:
                    type: string
                  suffix:
                    type: string
                  locale:
                    type: string
                  permissions:
                    type: array
                    items:
                      type: string
                  power:
                    type: integer
                  currency:
                    type: integer
                  premium_currency:
                    type: integer
                  blocked:
                    type: array
                    items:
                      type: string
                      format: uuid
                  inventory:
                    type: object
                    additionalProperties:
                      type: integer
                  properties:
                    type: object
                    additionalProperties:
                      type: string
                  discord_id:
                    type: string
  /api/players/{uuid}/stats:
    post:
      security:
        - auth: [ "player-stats" ]
      tags: [ "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: PlayerStats
              required: [ session, server, stats ]
              properties:
                session:
                  type: string
                  format: uuid
                server:
                  type: string
                  format: uuid
                stats:
                  type: object
                  additionalProperties:
                    type: integer
        required: true
      responses:
        200:
          description: OK
  /api/players/{uuid}/groups/update:
    post:
      security:
        - auth: [ "update-player-groups" ]
      tags: [ "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        200:
          description: OK
        404:
          description: Player not found
  /api/players/{uuid}/inventory/transaction:
    post:
      security:
        - auth: [ "player-inventory-transaction" ]
      tags: [ "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: integer
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        404:
          description: Player not found
  /api/servers/{label}/register:
    get:
      tags: [ "Registration" ]
      parameters:
        - name: label
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server"
        404:
          description: not found
  /api/servers/{uuid}/setstate:
    post:
      tags: [ "Server" ]
      security:
        - auth: [ "set-server-state" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: OK
        404:
          description: not found
  /api/proxy/ping:
    get:
      tags: [ "Proxy" ]
      security:
        - auth: [ "proxy-ping" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                title: PingInfo
                required: [ motd, slots, online ]
                properties:
                  online:
                    type: integer
                  slots:
                    type: integer
                  motd:
                    type: string
  /api/proxy/{uuid}/playercount:
    post:
      tags: [ "Proxy" ]
      security:
        - auth: [ "proxy-update-playercount" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
      responses:
        200:
          description: OK

  ######################################
  /api/onlinecount:
    get:
      tags: [ "Server" ]
      security:
        - auth: [ "get-onlinecount" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
  /api/servers:
    get:
      tags: [ "Server" ]
      security:
        - auth: [ "get-all-servers" ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Server"
    post:
      tags: [ "Server" ]
      security:
        - auth: [ "create-server" ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: CreateServer
              required: [ kind, name ]
              properties:
                kind:
                  type: string
                name:
                  type: string
                properties:
                  type: object
                  additionalProperties:
                    type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: Server name
        404:
          description: Kind not found
  /api/servers/{label}:
    get:
      tags: [ "Server" ]
      security:
        - auth: [ "get-server" ]
      parameters:
        - name: label
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Server"
        400:
          description: Server not found
    delete:
      tags: [ "Server" ]
      security:
        - auth: [ "delete-server" ]
      parameters:
        - name: label
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: Server not found
  /api/players/{uuid}/move:
    post:
      security:
        - auth: [ "move-player" ]
      tags: [ "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: PlayerMove
              properties:
                server:
                  type: string
                  format: uuid
                kind:
                  type: string
                admin_move:
                  type: boolean
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        404:
          description: Player or server does not exist
  /api/players/{uuid}/ban:
    post:
      security:
        - auth: [ "ban-player" ]
      tags: [ "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: PlayerBan
              properties:
                duration:
                  description: Duration in seconds
                  type: integer
                reason:
                  type: string
                issuer:
                  type: string
                  format: uuid
                ip:
                  type: boolean
                unban:
                  type: boolean
        required: true
      responses:
        200:
          description: OK
        404:
          description: Player does not exist
  /api/players/{uuid}/disconnect:
    post:
      security:
        - auth: [ "disconnect-player" ]
      tags: [ "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
        404:
          description: Player does not exist or is not online
  /api/players/{uuid}/transaction:
    post:
      security:
        - auth: [ "disconnect-player" ]
      tags: [ "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: PlayerTransaction
              properties:
                currency:
                  type: integer
                premium_currency:
                  type: integer
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        404:
          description: Player does not exist
  /api/discord/link/{uuid}:
    get:
      security:
        - auth: [ "create-discord-link" ]
      tags: [ "Discord", "Player" ]
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
        404:
          description: Player does not exist
  /api/discord/link/{code}:
    post:
      security:
        - auth: [ "complete-discord-link" ]
      tags: [ "Discord", "Player" ]
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: "DiscordID"
        required: true
      responses:
        200:
          description: OK
        404:
          description: Pending link does not exist
components:
  schemas:
    Leaderboard:
      type: object
      required: ["label", "leaderboard"]
      properties:
        label:
          type: string
        leaderboard:
          type: array
          items:
            type: string
    Message:
      type: array
      items:
        $ref: "#/components/schemas/MessageComponent"
    MessageComponent:
      type: object
      required: [ "text" ]
      properties:
        text:
          type: string
        color:
          type: string
        font:
          type: string
        modifiers:
          type: object
          properties:
            bold:
              type: boolean
            italic:
              type: boolean
            underlined:
              type: boolean
            strikethrough:
              type: boolean
            obfuscated:
              type: boolean
    Server:
      type: object
      required: [ id, description, ip, kind, label, state ]
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        ip:
          type: string
          format: ipv4
        key:
          type: string
          format: uuid
        kind:
          type: string
        label:
          type: string
        state:
          type: string
        properties:
          type: object
          additionalProperties:
            type: string
    OnlinePlayerInfo:
      type: object
      required: [ uuid, username, session, proxy ]
      properties:
        uuid:
          type: string
          format: uuid
        username:
          type: string
        session:
          type: string
          format: uuid
        proxy:
          type: string
          format: uuid
        server:
          type: string
          format: uuid
    PlayerInfo:
      type: object
      required: [ uuid, username, power, locale, properties, inventory, blocked ]
      properties:
        uuid:
          type: string
          format: uuid
        username:
          type: string
        power:
          type: integer
        locale:
          type: string
        prefix:
          type: string
        suffix:
          type: string
        currency:
          type: integer
        premium_currency:
          type: integer
        proxy:
          type: string
          format: uuid
        server:
          type: string
          format: uuid
        blocked:
          type: array
          items:
            type: string
            format: uuid
        ban:
          $ref: "#/components/schemas/Ban"
        inventory:
          additionalProperties:
            type: integer
        properties:
          additionalProperties:
            type: string
        discord_id:
          type: string
    Ban:
      type: object
      required: [ id, start ]
      properties:
        id:
          type: string
          format: uuid
        start:
          type: string
          #format: date-time
        end:
          type: string
          #format: date-time
        issuer:
          type: string
          format: uuid
        reason:
          type: string
        ip:
          type: string
          format: ipv4
        target:
          type: string
          format: uuid
  responses:
    401:
      description: You are not authorized to acces this object
    404:
      description: The requested object is not available
  securitySchemes:
    auth:
      type: "apiKey"
      name: "Authorization"
      in: "header"
